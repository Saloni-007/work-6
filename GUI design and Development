import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import sqlite3

class BillingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Billing System")
        
        # Create and configure the main frame
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        self.create_widgets(main_frame)
        
    def create_widgets(self, frame):
        # Customer information
        ttk.Label(frame, text="Customer Name:").grid(row=0, column=0, sticky=tk.W)
        self.customer_name = ttk.Entry(frame)
        self.customer_name.grid(row=0, column=1, sticky=(tk.W, tk.E))
        
        ttk.Label(frame, text="Customer Email:").grid(row=1, column=0, sticky=tk.W)
        self.customer_email = ttk.Entry(frame)
        self.customer_email.grid(row=1, column=1, sticky=(tk.W, tk.E))
        
        ttk.Label(frame, text="Product:").grid(row=2, column=0, sticky=tk.W)
        self.product_combo = ttk.Combobox(frame)
        self.product_combo.grid(row=2, column=1, sticky=(tk.W, tk.E))
        
        ttk.Label(frame, text="Quantity:").grid(row=3, column=0, sticky=tk.W)
        self.quantity = ttk.Entry(frame)
        self.quantity.grid(row=3, column=1, sticky=(tk.W, tk.E))
        
        self.submit_button = ttk.Button(frame, text="Submit", command=self.submit)
        self.submit_button.grid(row=4, column=0, columnspan=2)
        
        # Load products
        self.load_products()
        
    def load_products(self):
        conn = sqlite3.connect('billing_system.db')
        cursor = conn.cursor()
        cursor.execute('SELECT id, name FROM products')
        products = cursor.fetchall()
        conn.close()
        
        self.product_combo['values'] = [name for _, name in products]
        self.product_combo.bind('<<ComboboxSelected>>', self.update_price)
    
    def update_price(self, event):
        pass  # Functionality to update price based on selected product
    
    def submit(self):
        customer_name = self.customer_name.get()
        customer_email = self.customer_email.get()
        product_name = self.product_combo.get()
        quantity = self.quantity.get()
        
        if not customer_name or not product_name or not quantity:
            messagebox.showerror("Input Error", "All fields are required")
            return
        
        conn = sqlite3.connect('billing_system.db')
        cursor = conn.cursor()
        
        # Check if customer exists
        cursor.execute('SELECT id FROM customers WHERE name=? AND email=?', (customer_name, customer_email))
        customer = cursor.fetchone()
        
        if not customer:
            cursor.execute('INSERT INTO customers (name, email) VALUES (?, ?)', (customer_name, customer_email))
            customer_id = cursor.lastrowid
        else:
            customer_id = customer[0]
        
        # Get product ID
        cursor.execute('SELECT id, price FROM products WHERE name=?', (product_name,))
        product = cursor.fetchone()
        
        if not product:
            messagebox.showerror("Error", "Product not found")
            return
        
        product_id, price = product
        total = price * int(quantity)
        
        # Insert transaction
        cursor.execute('INSERT INTO transactions (customer_id, product_id, quantity, total) VALUES (?, ?, ?, ?)', 
                       (customer_id, product_id, quantity, total))
        
        conn.commit()
        conn.close()
        
        messagebox.showinfo("Success", "Transaction recorded successfully")
        self.reset_fields()
    
    def reset_fields(self):
        self.customer_name.delete(0, tk.END)
        self.customer_email.delete(0, tk.END)
        self.product_combo.set('')
        self.quantity.delete(0, tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = BillingApp(root)
    root.mainloop()
